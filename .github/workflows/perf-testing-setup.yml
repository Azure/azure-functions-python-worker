name: Throughput testing workflow

on:
  workflow_dispatch:
  pull_request:
    branches: [ dev ]

env:
  TESTS_DIR_PATH: ".ci/perf_tests/k6scripts/"
  PYTHON_VERSION: "3.8"
  PORT: 8000
  # AzureWebJobsStorage: ${{ secrets.PERFTESTSTORAGE }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: test
    strategy:
      fail-fast: false
      matrix:
        test_to_run: [ SyncHelloWorld ]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Set up Dotnet 2.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.405'
    - name: Set up Dotnet 6.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.x'
    - name: Setup k6 for throughput testing
      run: |
        cd $GITHUB_WORKSPACE
        curl https://github.com/loadimpact/k6/releases/download/v0.28.0/k6-v0.28.0-linux64.tar.gz -L | tar xvz --strip-components 1
        chmod 755 ./k6
        ./k6 version
    - name: Install dependencies and the worker
      run: |
        python -m pip install -q --upgrade pip
        python -m pip install -q --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple -U -e .[dev]
        python -m pip install -q --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple -U azure-functions --pre
        python setup.py build
        python setup.py webhost --branch-name=dev
        python setup.py extension
    - name: Build and Run the Docker image
      run: |
        echo "Building Docker image with Python version ${{ env.PYTHON_VERSION }}"
        docker build --build-arg PYTHON_VERSION=${{ env.PYTHON_VERSION }} --file .ci/perf_tests/dockerfiles/perf_tests.Dockerfile --tag perfimage:latest .
    
        echo "Checking environment variables..."
        echo "PYTHON_VERSION: ${{ env.PYTHON_VERSION }}"
        echo "PERFTESTSTORAGE: ${AzureWebJobsStorage} ${#AzureWebJobsStorage}"
        echo "PORT: ${{ env.PORT }}"
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
    
        if [ -z "${{ env.PYTHON_VERSION }}" ] || [ -z "${{ secrets.PERFTESTSTORAGE }}" ] || [ -z "${{ env.PORT }}" ]; then
          echo "One or more environment variables are not set. Exiting..."
          exit 1
        fi
    
        echo "Running Docker container..."
        container_id=$(docker run -d --privileged --shm-size="2g" --env FUNCTIONS_WORKER_RUNTIME_VERSION=${{ env.PYTHON_VERSION }} -p ${PORT}:80 -v $GITHUB_WORKSPACE/azure_functions_worker:/azure-functions-host/workers/python/${{ env.PYTHON_VERSION }}/LINUX/X64/azure_functions_worker perfimage:latest)
        sleep 10  # host needs some time to start.
        echo "Container ID is $container_id"
        echo "Fetching Docker container logs..."
        docker logs $container_id
        worker_pid=$(docker exec $container_id sh -c "ps aux | grep '[p]ython'" | awk '{print $2}')
        echo "Python worker process id is $worker_pid"
        echo "container_id=$container_id" >> $GITHUB_ENV
        echo "worker_pid=$worker_pid" >> $GITHUB_ENV
        
    - name: Validate if the functions are now running
      run: |
        curl --get http://localhost:${PORT}/api/${{ matrix.test_to_run }}
        
    - name: Start py-spy in the background
      run: |
        echo "Starting py-spy in background..."
        echo "Container id is $container_id"
        docker exec $container_id sh -c "pip install py-spy"
        docker exec -d $container_id sh -c "py-spy record -p $worker_pid -o /home/site/wwwroot/helloperf.svg -f flamegraph --idle --nonblocking --rate 1500 --duration 30 &"
        sleep 2  # Give it a moment to start
        py_spy_id=$(docker exec $container_id sh -c "ps aux | grep '[p]y-spy record'" | awk '{print $2}')
        echo "py_spy_id=$py_spy_id" >> $GITHUB_ENV
        
    - name: Run Throughput tests
      run: |
        chmod 755 .ci/perf_tests/run-perftests.sh
        .ci/perf_tests/run-perftests.sh localhost $PORT ${{ env.TESTS_DIR_PATH }} ${{ matrix.test_to_run }}
        echo "Tests completed, terminating py-spy..."
        echo "Py-Spy pid is $py_spy_id"
        # docker exec $container_id sh -c "kill -2 $py_spy_id"
        py_spy_id=$(docker exec $container_id sh -c "ps aux | grep '[p]y-spy record'" | awk '{print $2}')
        echo "Py-Spy pid is $py_spy_id"
        docker exec $container_id sh -c "ls -ltr /home/site/wwwroot"
        docker exec $container_id sh -c "find / -name helloperf.svg -not -path '/proc/*' -not -path '/sys/*' -not -path '/dev/*'"
        docker cp $container_id:/home/site/wwwroot/helloperf.svg .
        
    - name: Upload profiling result to artifact
      uses: actions/upload-artifact@v2
      with:
        name: py-spy-output
        path: helloperf.svg

    - name: Create Artifact Link
      run: |
        echo "You can download the SVG artifact from the Actions run page."
        echo "Link to the Actions run page: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
