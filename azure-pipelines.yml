name: $(Date:yyyyMMdd).$(Rev:r)

trigger:
- dev
- master
- release/*

variables:
    DOTNET_VERSION: '2.2.207'

schedules:
- cron: "0 8 * * 1,2,3,4"
  displayName: Monday to Thursday 1 AM build
  branches:
    include:
      - dev
      - master
      - release/*
    exclude:
    - releases/ancient/*

jobs:
- job: Tests
  pool:
    vmImage: 'ubuntu-18.04'
  strategy:
    matrix:
      Python36:
        pythonVersion: '3.6'
        linuxStorage: $(LinuxStorageConnectionString36)
        linuxCosmosDB: $(LinuxCosmosDBConnectionString36)
        linuxEventHub: $(LinuxEventHubConnectionString36)
        linuxServiceBus: $(LinuxServiceBusConnectionString36)
        linuxEventGridTopicUri: $(LinuxEventGridTopicUriString36)
        linuxEventGridConnectionKey: $(LinuxEventGridConnectionKeyString36)
      Python37:
        pythonVersion: '3.7'
        linuxStorage: $(LinuxStorageConnectionString37)
        linuxCosmosDB: $(LinuxCosmosDBConnectionString37)
        linuxEventHub: $(LinuxEventHubConnectionString37)
        linuxServiceBus: $(LinuxServiceBusConnectionString37)
        linuxEventGridTopicUri: $(LinuxEventGridTopicUriString37)
        linuxEventGridConnectionKey: $(LinuxEventGridConnectionKeyString37)
      Python38:
        pythonVersion: '3.8'
        linuxStorage: $(LinuxStorageConnectionString38)
        linuxCosmosDB: $(LinuxCosmosDBConnectionString38)
        linuxEventHub: $(LinuxEventHubConnectionString38)
        linuxServiceBus: $(LinuxServiceBusConnectionString38)
        linuxEventGridTopicUri: $(LinuxEventGridTopicUriString38)
        linuxEventGridConnectionKey: $(LinuxEventGridConnectionKeyString38)
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(pythonVersion)'
      addToPath: true
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: $(DOTNET_VERSION)
    displayName: 'Install dotnet'
  - task: ShellScript@2
    inputs:
      disableAutoCwd: true
      scriptPath: .ci/linux_devops_build.sh
    displayName: 'Build'
  - bash: |
        chmod +x .ci/linux_devops_e2e_tests.sh
        .ci/linux_devops_e2e_tests.sh
    env:
      LINUXSTORAGECONNECTIONSTRING: $(linuxStorage)
      LINUXCOSMOSDBCONNECTIONSTRING: $(linuxCosmosDB)
      LINUXEVENTHUBCONNECTIONSTRING: $(linuxEventHub)
      LINUXSERVICEBUSCONNECTIONSTRING: $(linuxServiceBus)
      LINUXEVENTGRIDTOPICURI: $(linuxEventGridTopicUri)
      LINUXEVENTGRIDTOPICCONNECTIONKEY: $(linuxEventGridConnectionKey)
    displayName: 'E2E Tests'
  - task: PublishCodeCoverageResults@1
    inputs:
        codeCoverageTool: cobertura
        summaryFileLocation: coverage.xml

- job: Build_WINDOWS_X64
  dependsOn: 'Tests'
  condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
  pool:
    vmImage: 'windows-2019'
  strategy:
    matrix:
      Python36V2:
        pythonVersion: '3.6'
        workerPath: 'python/prodV2/worker.py'
      Python37V2:
        pythonVersion: '3.7'
        workerPath: 'python/prodV2/worker.py'
      Python36V3:
        pythonVersion: '3.6'
        workerPath: 'python/prodV3/worker.py'
      Python37V3:
        pythonVersion: '3.7'
        workerPath: 'python/prodV3/worker.py'
      Python38V3:
        pythonVersion: '3.8'
        workerPath: 'python/prodV3/worker.py'
  steps:
  - template: pack/templates/win_env_gen.yml
    parameters:
      pythonVersion: '$(pythonVersion)'
      workerPath: '$(workerPath)'
      architecture: 'x64'
      artifactName: '$(pythonVersion)_WINDOWS_X64'
- job: Build_WINDOWS_X86
  dependsOn: 'Tests'
  condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
  pool:
    vmImage: 'windows-2019'
  strategy:
    matrix:
      Python37V2:
        pythonVersion: '3.7'
        workerPath: 'python/prodV2/worker.py'
      Python37V3:
        pythonVersion: '3.7'
        workerPath: 'python/prodV3/worker.py'
      Python38V3:
        pythonVersion: '3.8'
        workerPath: 'python/prodV3/worker.py'
  steps:
  - template: pack/templates/win_env_gen.yml
    parameters:
      pythonVersion: '$(pythonVersion)'
      workerPath: '$(workerPath)'
      architecture: 'x86'
      artifactName: '$(pythonVersion)_WINDOWS_x86'
- job: Build_LINUX_X64
  dependsOn: 'Tests'
  condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
  pool:
    vmImage: 'ubuntu-18.04'
  strategy:
    matrix:
      Python36V2:
        pythonVersion: '3.6'
        workerPath: 'python/prodV2/worker.py'
      Python37V2:
        pythonVersion: '3.7'
        workerPath: 'python/prodV2/worker.py'
      Python36V3:
        pythonVersion: '3.6'
        workerPath: 'python/prodV3/worker.py'
      Python37V3:
        pythonVersion: '3.7'
        workerPath: 'python/prodV3/worker.py'
      Python38V3:
        pythonVersion: '3.8'
        workerPath: 'python/prodV3/worker.py'
  steps:
  - template: pack/templates/nix_env_gen.yml
    parameters:
      pythonVersion: '$(pythonVersion)'
      workerPath: '$(workerPath)'
      artifactName: '$(pythonVersion)_LINUX_X64'
- job: Build_OSX_X64
  dependsOn: 'Tests'
  condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
  pool:
    vmImage: 'macOS-10.15'
  strategy:
    matrix:
      Python36V2:
        pythonVersion: '3.6'
        workerPath: 'python/prodV2/worker.py'
      Python37V2:
        pythonVersion: '3.7'
        workerPath: 'python/prodV2/worker.py'
      Python36V3:
        pythonVersion: '3.6'
        workerPath: 'python/prodV3/worker.py'
      Python37V3:
        pythonVersion: '3.7'
        workerPath: 'python/prodV3/worker.py'
      Python38V3:
        pythonVersion: '3.8'
        workerPath: 'python/prodV3/worker.py'
  steps:
  - template: pack/templates/nix_env_gen.yml
    parameters:
      pythonVersion: '$(pythonVersion)'
      workerPath: '$(workerPath)'
      artifactName: '$(pythonVersion)_OSX_X64'

- job: PackageWorkers
  dependsOn: ['Build_WINDOWS_X64', 'Build_WINDOWS_X86', 'Build_LINUX_X64', 'Build_OSX_X64']
  condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
  pool:
      vmImage: 'vs2017-win2016'
  steps:
  - bash: |
      echo "Releasing from $BUILD_SOURCEBRANCHNAME"

      if [[ $BUILD_SOURCEBRANCHNAME = 2\.* ]]
      then
        NUSPEC="pack\Microsoft.Azure.Functions.V2.PythonWorker.nuspec"
      elif [[ $BUILD_SOURCEBRANCHNAME = 3\.* ]]
      then
        NUSPEC="pack\Microsoft.Azure.Functions.V3.PythonWorker.nuspec"
      else
        echo "No Matching Release Tag For $BUILD_SOURCEBRANCHNAME"
      fi

      echo "##vso[task.setvariable variable=worker_version]$BUILD_SOURCEBRANCHNAME"
      echo "##vso[task.setvariable variable=nuspec_path]$NUSPEC"
    displayName: "Generate Worker NuGet Package for Release $BUILD_SOURCEBRANCHNAME"
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'specific'
      downloadPath: '$(Build.SourcesDirectory)'
  - task: NuGetCommand@2
    inputs:
      command: pack
      packagesToPack: '$(nuspec_path)'
      versioningScheme: 'byEnvVar'
      versionEnvVar: WORKER_VERSION
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'PythonWorker'
