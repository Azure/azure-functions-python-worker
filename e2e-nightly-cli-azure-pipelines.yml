name: 1.0.0-beta$(Date:yyyyMMdd)$(Rev:.r)

variables:
    DOTNET_VERSION: '2.2.300'
    CORE_TOOLS_EXE_PATH: '$(Build.SourcesDirectory)/Azure.Functions.Core.Tools/func'

jobs:
- job: Tests
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        pythonVersion: '3.6'
    maxParallel: 1
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(pythonVersion)'
      addToPath: true
  - powershell:
      .ci/e2e/setup-e2e.ps1
    displayName: 'Setup custom Core Tools'
    env:
      CORE_TOOLS_EXE_PATH: '$(CORE_TOOLS_EXE_PATH)'
      CORE_TOOLS_URL: $(CORE_TOOLS_URL)
  - task: ShellScript@2
    inputs:
      disableAutoCwd: true # Execute in current directory
      scriptPath: .ci/linux_devops_tools.sh
    displayName: 'Install Core Tools production'
  - task: DotNetCoreInstaller@0
    inputs:
      packageType: 'sdk'
      version: $(DOTNET_VERSION)
    displayName: 'Install dotnet'
  - bash: |
        set -e -x
        python -m pip install -U -e .[dev]
        python setup.py webhost
    displayName: 'Build'
  - bash: |
        echo ${CORE_TOOLS_EXE_PATH}
        chmod a+x ${CORE_TOOLS_EXE_PATH}
        pytest --resultlog=$(Build.ArtifactStagingDirectory)/results tests/endtoend
    continueOnError: true
    env:
      CORE_TOOLS_EXE_PATH: '$(CORE_TOOLS_EXE_PATH)'
      AzureWebJobsStorage: $(LinuxStorageConnectionString)
      AzureWebJobsCosmosDBConnectionString: $(LinuxCosmosDBConnectionString)
      AzureWebJobsEventHubConnectionString: $(LinuxEventHubConnectionString)
      AzureWebJobsServiceBusConnectionString: $(LinuxServiceBusConnectionString)
    displayName: 'E2E Tests'
  - bash: |
      apt-get update
      apt-get install unzip zip -y
      mkdir $(System.DefaultWorkingDirectory)/alle2etests/.
      cp -a $(Build.Repository.LocalPath)/tests/endtoend/*_functions/. $(System.DefaultWorkingDirectory)/alle2etests/.
      echo "{\"version\":\"2.0\",\"logging\":{\"logLevel\":{\"default\":\"Trace\"}}, \
      \"http\":{\"routePrefix\":\"api\"},\"swagger\":{\"enabled\":true},\"eventHub\":{\"maxBatchSize\":1000,\"prefetchCount\":1000, \
      \"batchCheckpointFrequency\":1},\"functionTimeout\":\"00:05:00\"}" > $(System.DefaultWorkingDirectory)/alle2etests/host.json
      zip -r $(System.DefaultWorkingDirectory)/e2etestspython.zip $(System.DefaultWorkingDirectory)/alle2etests/*
     displayName: 'Collecting End To End test directory'
  - pwsh: |
      Install-Module Az.Storage -Force -Verbose -Scope CurrentUser
      if (-not (Get-command new-azstoragecontext -ea SilentlyContinue))
      {
        throw "new-azstoragecontext is not present"
      }
      $localFile = '$(System.DefaultWorkingDirectory)\e2etestspython.zip'
      if (Test-Path $localFile)
      {
        Write-Host "File exists"
      }
      $blobName = 'e2etestspython.zip'
      $Context = New-AzStorageContext -StorageAccountName $(StorageAccountName) -StorageAccountKey $(StorageAccountKey)
      Set-AzStorageBlobContent -File $localFile -Container $(ContainerName) -Blob $blobName -Context $Context  -Force -Verbose
    displayName: 'Uploading E2E project to storage'
  - bash: |
      zip -r $(System.DefaultWorkingDirectory)/pythonworker.zip $(Build.Repository.LocalPath)/python/*
    displayName: 'Creating Python worker artifact for storage'
  - pwsh: |
    $localFilepythonWorker = '$(System.DefaultWorkingDirectory)\pythonworker.zip'
      if (Test-Path $localFilepythonWorker)
      {
        Write-Host "localFilepythonWorker file exists"
      }
      $blobNamepythonWorker = 'pythonworker.zip'
      $Context = New-AzStorageContext -StorageAccountName $(StorageAccountName) -StorageAccountKey $(StorageAccountKey)
      Set-AzStorageBlobContent -File $localFilepythonWorker -Container $(ContainerName) -Blob $blobNamepythonWorker -Context $Context  -Force -Verbose
    displayName: 'Uploading worker information to storage'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'test_result'
